# coding: utf-8

require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.configure do |c|
  # c.filter = {wip:true}
end

describe Admin::NaturesController do
  include SpecControllerHelper

  let(:nat1) {mock_model(Nature, book:@ib)}
  let(:nat2) {mock_model(Nature)}
   

  def valid_attributes
    {"name"=>'petite', "period_id"=>@p.id.to_s}
  end

  before(:each) do
    minimal_instances
    @p.stub(:natures).and_return(@a = double(Arel))
    @o.stub(:income_books).and_return [1,2]
    @o.stub(:outcome_books).and_return [3,4]
  end

  describe "GET index"  do 


    it "cherche le livre" do
      @o.should_receive(:in_out_books).and_return(@ar = double(Arel))
      @ar.should_receive(:find).with('1').and_return(@db = double(Book))
      @db.stub_chain(:natures, :includes, :within_period, :order)
      get :index, {:period_id=>@p.to_param, book_id:1}, valid_session
    end
    
    it 'et l assigne' do
      @o.stub_chain(:in_out_books, :find).and_return(@db = Book.new)
      @db.stub_chain(:natures, :includes, :within_period, :order)
      get :index, {:period_id=>@p.to_param, book_id:1}, valid_session
      assigns(:book).should == @db
    end
    
    it 'récupère les natures' do
      @o.stub_chain(:in_out_books, :find).and_return(@db = Book.new)
      @db.should_receive(:natures).and_return(@ar = double(Arel))
      @ar.should_receive(:includes).with('account').and_return @ar
      @ar.should_receive(:within_period).with(@p).and_return @ar
      @ar.should_receive(:order).with(:position).and_return 'la collection de natures'
      get :index, {:period_id=>@p.to_param, book_id:1}, valid_session
      assigns(:natures).should == 'la collection de natures'
    end
  end

  

  describe "GET new"  do 
    it "assigns a new nature as @nature avec le premier livre" do
      @o.stub(:in_out_books).and_return [@mb = mock_model(Book),2,3,4]
      @a.should_receive(:new).and_return(@mock_nat = Nature.new)
      @mock_nat.should_receive('book_id=').with(@mb.id).and_return
      get :new,  {:period_id=>@p.to_param}, valid_session
      assigns(:nature).should be_a_new(Nature)
    end
    
    it 'un paramètre book_id peut être utilisé pour initialiser la nature' do
      @a.should_receive(:new).and_return(@mock_nat = Nature.new)
      @mock_nat.should_receive('book_id=').with('1').and_return
      get :new,  {:period_id=>@p.to_param, book_id:'1'}, valid_session
    end
  end

  describe "GET edit"  do
    it "assigns the requested bank_account as @bank_account" do
      @a.should_receive(:find).with(nat1.to_param).and_return nat1
      get :edit,  {:period_id=>@p.to_param, :id=>nat1.to_param}, valid_session
      assigns(:nature).should == nat1
    end
  end

  describe "POST create"  do
    describe "with valid params" do
      it "creates a new nature" do
          @a.should_receive(:new).with(valid_attributes).and_return(@n = mock_model(Nature).as_new_record)
          @n.stub(:save)
          post :create, {:period_id=>@p.to_param, :nature => valid_attributes}, valid_session
      end

      it "assigns a newly created nature as @nature" do
        @a.stub(:new).and_return(nat1)
        nat1.stub(:save).and_return(true)
        post :create, {:period_id=>@p.to_param, :nature => valid_attributes}, valid_session
        assigns(:nature).should == nat1
        
      end

      it "redirects to the created bank_account" do
        @a.stub(:new).and_return(nat1)
        nat1.stub(:save).and_return(true)
        post :create, {:period_id=>@p.to_param, :nature => valid_attributes}, valid_session
        response.should redirect_to(admin_organism_period_natures_url(@o, @p))
      end 
    end

    describe "with invalid params" do
      
      it "re-renders the 'new' template" do
        @a.stub(:new).and_return(nat1)
        nat1.stub(:save).and_return(false)
        post :create, {:period_id=>@p.to_param, :nature => valid_attributes}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested nature" do
        @a.should_receive(:find).with(nat1.to_param).and_return(nat1)
        nat1.should_receive(:update_attributes).with({'these' => 'params'}).and_return(true)
        put :update,{:period_id=>@p.id.to_s,  :id => nat1.id, :nature => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested nature as @nature" do
        @a.stub(:find).with(nat1.to_param).and_return(nat1)
        nat1.stub(:update_attributes).and_return(true)
        put :update, {:period_id=>@p.to_param,  :id => nat1.id, :nature => valid_attributes}, valid_session
        assigns(:nature).should == nat1
      end

      it "redirects to the natures index" do
        @a.stub(:find).with(nat1.to_param).and_return(nat1)
        nat1.stub(:update_attributes).and_return(true)
        put :update, {:period_id=>@p.to_param,  :id => nat1.id, :nature => valid_attributes}, valid_session
        response.should redirect_to(admin_organism_period_natures_url(@o, @p))
      end
    end

    describe "with invalid params" do
      it "assigns the bank_account as @bank_account" do
        @a.stub(:find).with(nat1.to_param).and_return(nat1)
        nat1.stub(:update_attributes).and_return(false)
        put :update, {:period_id=>@p.to_param,  :id => nat1.id, :nature => valid_attributes}, valid_session
        assigns(:nature).should eq(nat1)
      end

      it "re-renders the 'edit' template" do
       @a.stub(:find).with(nat1.to_param).and_return(nat1)
        nat1.stub(:update_attributes).and_return(false)
        put :update, {:period_id=>@p.to_param,  :id => nat1.id, :nature => valid_attributes}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy"  do
    it "destroys the requested nature" do
       @a.should_receive(:find).with(nat1.to_param).and_return(nat1)
       nat1.should_receive(:destroy).and_return true
        delete :destroy, {:period_id=>@p.to_param,  :id => nat1.to_param}, valid_session

    end

    it "redirects to the natures list" do
     @a.stub(:find).with(nat1.to_param).and_return(nat1)
         delete :destroy, {:period_id=>@p.to_param,  :id => nat1.to_param}, valid_session
      response.should redirect_to(admin_organism_period_natures_url(@o, @p))
    end
  end

  describe 'POST REORDER' do
    it 'should look for nature and assing it' do
      Nature.should_receive(:find).with(nat1.to_param).and_return nat1
      nat1.stub(:insert_at)
      post :reorder, {organism_id:@o.to_param, :period_id=>@p.to_param, 
        id:nat1.to_param, :toPosition=>'1', :format=>:js}, valid_session
      
      assigns[:nature].should == nat1
    end

    it 'reçoit insert_at' do
      Nature.stub(:find).with(nat1.to_param).and_return nat1
      nat1.should_receive(:insert_at).with(1)
      post :reorder, {organism_id:@o.to_param, :period_id=>@p.to_param,
        id:nat1.to_param, :toPosition=>'1', :format=>:js}, valid_session
     end

    it 'renvoie bad_request si mauvais argument' , wip:true do
      post :reorder, {organism_id:@o.to_param, :period_id=>@p.to_param,
        id:nat1.to_param, :fromPosition=>'1', :format=>:js}, valid_session
      response.code.to_s.should match /^4/ # renvoie une erreur de type 400
    end

  end

  

  
end
