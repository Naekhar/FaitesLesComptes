require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::BankAccountsController do
  include SpecControllerHelper

  let(:ba1) {mock_model(BankAccount)}
  let(:ba2) {mock_model(BankAccount)}
   

  def valid_attributes
    {"name"=>'CrediX', "number"=>'5555', "nickname"=>'Compte sur livret', "organism_id"=>@o.id.to_s}
  end

  before(:each) do
    minimal_instances
    @o.stub(:bank_accounts).and_return @a = double(Arel)

  end

  describe "GET index" do


    it "assigns all bank_accounts as @bank_accounts" do
      @a.stub(:all).and_return [1,2] 
      get :index, {:organism_id=>@o.id.to_s}, valid_session
      assigns(:bank_accounts).should == [1,2]
    end
  end

  

  describe "GET new" do
    it "assigns a new bank_account as @bank_account" do
      @a.should_receive(:new).and_return mock_model(BankAccount).as_new_record
      get :new,  {:organism_id=>@o.id.to_s}, valid_session
      assigns(:bank_account).should be_a_new(BankAccount) 
    end
  end

  describe "GET show" do
    it "assigns the requested bank_account as @bank_account" do
      BankAccount.stub(:find).with(ba1.id.to_s).and_return(ba1)
      get :show,{ organism_id:@o.id.to_s, :id => ba1.id.to_s}, valid_session
      assigns(:bank_account).should eq(ba1)
    end
  end


  describe "GET edit" do 
    it "assigns the requested bank_account as @bank_account" do
      BankAccount.stub(:find).with(ba1.id.to_s).and_return(ba1)
      get :edit,{ organism_id:@o.id.to_s, :id => ba1.id.to_s}, valid_session
      assigns(:bank_account).should eq(ba1)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new bank_account" do
          @a.should_receive(:new).with(valid_attributes).and_return(@b = mock_model(BankAccount).as_new_record)
          @b.stub(:save)
          post :create, {:organism_id=>@o.id.to_s, :bank_account => valid_attributes}, valid_session
      end

      it "assigns a newly created bank_account as @bank_account" do
        @a.stub(:new).and_return(ba1)
        ba1.stub(:save).and_return(true)
        post :create, {:organism_id=>@o.id.to_s, :bank_account => valid_attributes}, valid_session
        assigns(:bank_account).should == ba1
        
      end

      it "redirects to the created bank_account" do
        @a.stub(:new).and_return(ba1)
        ba1.stub(:save).and_return(true)
        post :create, {:organism_id=>@o.id.to_s,  :bank_account => valid_attributes}, valid_session
        response.should redirect_to(admin_organism_bank_accounts_url(@o))
      end 
    end

    describe "with invalid params" do
      
      it "re-renders the 'new' template" do
        @a.stub(:new).and_return(ba1)
        ba1.stub(:save).and_return(false)
        post :create,  {:organism_id=>@o.id.to_s,  :bank_account => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested bank_account" do
        BankAccount.should_receive(:find).with(ba1.id.to_s).and_return(ba1)
        ba1.should_receive(:update_attributes).with({'these' => 'params'}).and_return(true)
        put :update,{:organism_id=>@o.id.to_s,  :id => ba1.id, :bank_account => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested bank_account as @bank_account" do
        BankAccount.stub(:find).with(ba1.id.to_s).and_return(ba1)
        ba1.stub(:update_attributes).and_return(true)
        put :update, {:organism_id=>@o.id.to_s,  :id => ba1.id, :bank_account => valid_attributes}, valid_session
        assigns(:bank_account).should eq(ba1)
      end

      it "redirects to the bank_account" do
        BankAccount.stub(:find).with(ba1.id.to_s).and_return(ba1)
        ba1.stub(:update_attributes).and_return(true)
        put :update, {:organism_id=>@o.id.to_s, :id => ba1.id, :bank_account => valid_attributes}, valid_session
        response.should redirect_to(admin_organism_bank_accounts_url(@o))
      end
    end

    describe "with invalid params" do
      it "assigns the bank_account as @bank_account" do
        BankAccount.stub(:find).with(ba1.id.to_s).and_return(ba1)
        ba1.stub(:update_attributes).and_return(false)
        put :update, {:organism_id=>@o.id.to_s, :id => ba1.id.to_s, :bank_account => {}}, valid_session
        assigns(:bank_account).should eq(ba1)
      end

      it "re-renders the 'edit' template" do
         BankAccount.stub(:find).with(ba1.id.to_s).and_return(ba1)
        ba1.stub(:update_attributes).and_return(false)
        put :update, {:organism_id=>@o.id.to_s,  :id => ba1.id.to_s, :bank_account => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

#  describe "DELETE destroy" do
#    it "destroys the requested bank_account" do
#       BankAccount.should_receive(:find).with(ba1.id.to_s).and_return(ba1)
#        delete :destroy, {:organism_id=>@o.id.to_s,  :id => ba1.id.to_s}, valid_session
#
#    end
#
#    it "redirects to the bank_accounts list" do
#      BankAccount.should_receive(:find).with(ba1.id.to_s).and_return(ba1)
#      delete :destroy, {:organism_id=>@o.id.to_s,  :id => ba1.id.to_s}, valid_session
#      response.should redirect_to(admin_organism_bank_accounts_url(@o))
#    end
#  end

end
