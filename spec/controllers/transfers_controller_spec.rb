require 'spec_helper'

RSpec.configure do |c|
  # c.filter = {wip:true}
end

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TransfersController do
  include SpecControllerHelper

  before(:each) do
    minimal_instances

    @ba = mock_model(BankAccount, name:'Debix', number:'123Z')
    @bb = mock_model(BankAccount, name:'Debix', number:'784AZ')
    @od = mock_model(OdBook)
    OdBook.stub(:first).and_return @od
    
  end


  
  # This should return the minimal set of attributes required to create a valid
  # Transfer. As you add validations to Transfer, be sure to
  # update the return value of this method accordingly. 
  def valid_attributes
    { "amount"=>1245.to_s, 'book_id'=>@od.to_param,
      "narration"=>'Premier virement', "date"=>Date.today.to_formatted_s('%d-%m-%Y'),
      :compta_lines_attributes=>{'0'=>{account_id:@ba.to_param}, '1'=>{account_id:@bb.to_param}}
     }
  end


  # les attributs sont modifiés au début de l'action create pour transmettre aux lignes
  # le paramètre montant
  def modified_attributes
    {  'book_id'=>@od.to_param,
      "narration"=>'Premier virement', "date"=>Date.today.to_formatted_s('%d-%m-%Y'),
      'compta_lines_attributes'=>{'0'=>{'account_id'=>@ba.to_param, 'credit'=>'1245'},
          '1'=>{'account_id'=>@bb.to_param, 'debit'=>'1245'} }
     }
  end

  describe "GET index"  do
    it "assigns all transfers as @transfers" do
      
      Transfer.should_receive(:order).with('date ASC').and_return [1,2]
      get :index, {}, valid_session
      assigns(:transfers).should ==  [1,2]
    end
  end

  
  describe "GET new"  do

  
    it "assigns a new transfer as @transfer" do
      @od.should_receive(:transfers).and_return a = double(Arel)
      a.should_receive(:new).and_return(@t = mock_model(Transfer).as_new_record)
      @t.should_receive(:line_from).and_return(@cl1 = mock_model(ComptaLine))
      @t.should_receive(:line_to).and_return(@cl2 = mock_model(ComptaLine))
      get :new, {}, valid_session
      assigns(:transfer).should be_a_new(Transfer)
      assigns(:line_from).should == @cl1
      assigns(:line_to).should == @cl2
    end
  end

  describe "GET edit" do
    before(:each) do
      @t = mock_model(Transfer)
      @t.stub(:line_from).and_return(@cl1 = mock_model(ComptaLine))
      @t.stub(:line_to).and_return(@cl2 = mock_model(ComptaLine))
    end

    it "assigns the requested transfer as @transfer" do
      Transfer.should_receive(:find).with(@t.to_param).and_return @t
      get :edit, {:id =>@t.to_param}, valid_session
      assigns(:transfer).should == @t
      assigns(:line_from).should == @cl1
      assigns(:line_to).should == @cl2
    end
  end

  describe "POST create"   do
    
    before(:each) do
      @od.stub(:transfers).and_return @a = double(Arel)
    end


    it "receives new with modified_params" do
      @a.should_receive(:new).with(modified_attributes).and_return(@t = double(Transfer))
      @t.should_receive(:save).and_return(true)
      post :create, {:transfer => valid_attributes}, valid_session
    end

    describe "with valid params" do

      before(:each) do
        @a.stub(:new).with(modified_attributes).and_return @t= mock_model(Transfer).as_new_record
        @t.stub(:save).and_return true
      end
      

      it "assigns a newly created transfer as @transfer" do
        post :create, {:transfer => valid_attributes}, valid_session
        assigns(:transfer).should == @t
      end

      it "redirects to the created transfer" do
        post :create, {:transfer => valid_attributes}, valid_session
        response.should redirect_to(transfers_url)
      end
    end

    describe "with invalid params" do
      before(:each) do
        @a.stub(:new).with(modified_attributes).and_return @t= mock_model(Transfer).as_new_record
        @t.stub(:save).and_return false
      end

      it "assigns a newly created but unsaved transfer as @transfer" do
        post :create, {:transfer => valid_attributes}, valid_session
        assigns(:transfer).should be_a_new(Transfer)
      end

      it "re-renders the 'new' template" do
        post :create, {:transfer => valid_attributes}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update"  do

    before(:each) do
      @t = mock_model(Transfer)
      Transfer.stub(:find).with(@t.id.to_s).and_return(@t)
    end

    it 'should receive update_attributes' do
      @t.should_receive(:update_attributes).with({'these' => 'params'}).and_return true
      put :update, {:organism_id=>@o.to_param,:id => @t.to_param, :transfer => {'these' => 'params'}}, valid_session
    end

    it "assigns the requested transfer as @transfer" do
      @t.stub(:update_attributes)
      put :update, { :id => @t.to_param, :transfer => valid_attributes}, valid_session
      assigns(:transfer).should == @t
    end

    describe "with valid params" do
      before(:each) do
        @t.stub(:update_attributes).and_return true
      end
 

      it "redirects to the transfer index" do
        put :update, {:id => @t.to_param, :transfer => valid_attributes}, valid_session
        response.should redirect_to(transfers_url)
      end
    end

    describe "with invalid params" do
      before(:each) do
        @t.stub(:update_attributes).and_return false
      end

      it "re-renders the 'edit' template" do
        put :update, {:organism_id=>@o.to_param, :id => @t.to_param, :transfer => valid_attributes}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" , wip:true do
    before(:each) do
      @t = mock_model(Transfer)
      Transfer.stub(:find).with(@t.id.to_s).and_return(@t)
    end

    it "receive the destroy message" do
      @t.should_receive(:destroy)
      delete :destroy, {:organism_id=>@o.to_param, :id => @t.to_param}, valid_session
    end

    it "redirects to the transfers list" do
      @t.stub(:destroy)
      delete :destroy, {:organism_id=>@o.to_param, :id => @t.to_param}, valid_session
      response.should redirect_to(transfers_url)
    end
  end

end
