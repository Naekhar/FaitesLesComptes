# -*- encoding : utf-8 -*-

require 'spec_helper'

RSpec.configure do |c|
  # c.filter = {wip:true}  
end

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TransfersController do
  include SpecControllerHelper 

  before(:each) do
    minimal_instances

    @ba = mock_model(BankAccount, name:'Debix', number:'123Z')
    @bb = mock_model(BankAccount, name:'Debix', number:'784AZ')
    @od = mock_model(OdBook)
    @o.stub(:od_books).and_return(double(:first=>@od))

    
  end


  
  # This should return the minimal set of attributes required to create a valid
  # Transfer. As you add validations to Transfer, be sure to
  # update the return value of this method accordingly. 
  def valid_attributes
    { "amount"=>1245.to_s, 'book_id'=>@od.to_param,
      "narration"=>'Premier virement', "date"=>Date.today.to_formatted_s('%d-%m-%Y'),
      :compta_lines_attributes=>{'0'=>{account_id:@ba.to_param}, '1'=>{account_id:@bb.to_param}}
    }
  end


  # les attributs sont modifiés au début de l'action create pour transmettre aux lignes
  # le paramètre montant
  def modified_attributes
    {  'book_id'=>@od.to_param,
      "narration"=>'Premier virement', "date"=>Date.today.to_formatted_s('%d-%m-%Y'),
      'compta_lines_attributes'=>{'0'=>{'account_id'=>@ba.to_param, 'credit'=>'1245'},
        '1'=>{'account_id'=>@bb.to_param, 'debit'=>'1245'} }
    }
  end

  describe "GET index"  do
    
    it "recherche tous les transfers appartenant à l organisme dans la period" do
      @od.should_receive(:transfers).and_return(@ar = double(Arel))
      @ar.should_receive(:within_period).with(@p).and_return @ar  
      @ar.should_receive(:order).with('date ASC').and_return [1,2]
      get :index, {mois:'tous'}, valid_session
      
    end
    
    it 'remplit la variable transfers' do
      @od.stub_chain(:transfers, :within_period, :order).and_return [1,2]
      get :index, {mois:'tous'}, valid_session
      assigns(:transfers).should ==  [1,2]
    end
    
    describe 'filtrage par mois' do
      
      before(:each) do
        @my = MonthYear.from_date(Date.today)
      end
      
      it 'avec params mois et an, filtre l affichage des transfers selon ces données' do
        @od.should_receive(:transfers).and_return(@ar = double(Arel))
        @ar.should_receive(:mois).with(@my.beginning_of_month).and_return @ar
        @ar.should_receive(:order).with('date ASC')
        get :index, @my.to_french_h, valid_session
      end
      
      it 'avec params[:mois] = tous, affiche tous les transferts de l exercice' do
        @od.should_receive(:transfers).and_return(@ar = double(Arel))
        @ar.should_receive(:within_period).and_return @ar
        @ar.should_not_receive(:mois).with(@my.beginning_of_month)
        @ar.should_receive(:order).with('date ASC').and_return [1,2]
        get :index, {mois:'tous'}, valid_session
      end
      
      
    end
  end
  
  # la vue Show est utilisée pour afficher le détail d'un Transfert à 
  # partir d'une vue Banque ou Caisse.
  describe "GET show", wip:true do
    
    before(:each) do
      Transfer.stub(:find).and_return(@tra = mock_model(Transfer)) 
    end
    
    it 'cherche le Transfer avec l id' do
      Transfer.should_receive(:find).and_return(mock_model(Transfer))
      get :show, {:id=>1}, valid_session
    end
    
    it 'l assigne à la variable transfer' do
      get :show, {:id=>1}, valid_session
      assigns[:transfer].should == @tra
    end
    
    
    it 'puis rend la vue show' do
      get :show, {:id=>1}, valid_session
      response.should render_template("show")
    end
    
    
    
  end

  
  describe "GET new"  do
  
    it "assigns a new transfer as @transfer" do
      @od.should_receive(:transfers).and_return a = double(Arel)
      a.should_receive(:new).and_return(@t = mock_model(Transfer).as_new_record)
      @t.should_receive(:add_lines)
      get :new, {:mois=>Date.today.month, :an=>Date.today.year}, valid_session
      assigns(:transfer).should be_a_new(Transfer)
    end
  end

  describe "GET edit" do
    before(:each) do
      @t = mock_model(Transfer)
      @t.stub(:line_from).and_return(@cl1 = mock_model(ComptaLine))
      @t.stub(:line_to).and_return(@cl2 = mock_model(ComptaLine))
    end

    it "assigns the requested transfer as @transfer" do
      Transfer.should_receive(:find).with(@t.to_param).and_return @t
      get :edit, {:id =>@t.to_param}, valid_session
      assigns(:transfer).should == @t
      assigns(:line_from).should == @cl1
      assigns(:line_to).should == @cl2
    end
  end

  describe "POST create"   do
    
    before(:each) do
      @od.stub(:transfers).and_return @a = double(Arel)
      @controller.stub(:fill_author)
    end


    it "receives new with modified_params" do
      @a.should_receive(:new).with(modified_attributes).and_return(@t = double(Transfer))
      @t.should_receive(:save).and_return(true)
      @t.stub(:id).and_return 999
      @t.stub(:date).and_return(Date.today) 
      post :create, {:transfer => valid_attributes}, valid_session
    end
    
   

    describe "with valid params" do

      before(:each) do
        @a.stub(:new).with(modified_attributes).and_return @t= mock_model(Transfer).as_new_record
        @t.stub(:date).and_return(Date.today) # car sinon le mock_model ne transforme pas la date
        @t.stub(:save).and_return true
      end
      
      it 'recoit fill_author' do
        @controller.should_receive(:fill_author).with(@t)
        post :create, {:transfer => valid_attributes}, valid_session
      end
      

      it "assigns a newly created transfer as @transfer" do
        post :create, {:transfer => valid_attributes}, valid_session
        assigns(:transfer).should == @t
      end

      it "redirects vers la vue index avec filtre sur le mois et l année" do
        
        post :create, {:transfer => valid_attributes}, valid_session
        response.should redirect_to(transfers_url({:mois=>('%02d' % Date.today.month), :an=>Date.today.year}))
      end

      it 'sends a flash with writing id' do
        @t.stub(:id).and_return 9999
        post :create, {:transfer => valid_attributes}, valid_session
        flash[:notice].should == "Le transfert a été enregistré sous le numéro d'écriture #{9999}"
      end
    end

    describe "with invalid params" do
      before(:each) do
        @a.stub(:new).with(modified_attributes).and_return @t= mock_model(Transfer).as_new_record
        @t.stub(:save).and_return false
      end

      it "assigns a newly created but unsaved transfer as @transfer" do
        post :create, {:transfer => valid_attributes}, valid_session
        assigns(:transfer).should be_a_new(Transfer)
      end

      it "re-renders the 'new' template" do
        post :create, {:transfer => valid_attributes}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update"  do

    def changed_attrs 
      {"date_picker"=>Date.today.to_formatted_s('%d/%m/%Y'),
        "ref"=>"",
        "narration"=>"Virement interne", 
        "amount"=>"1050.00",
        "compta_lines_attributes"=>{"0"=>{"account_id"=>"89", "id"=>"37"},
          "1"=>{"account_id"=>"90", "id"=>"38"}}}
    end
    
    def pre_treatment_attrs
      {"date_picker"=>Date.today.to_formatted_s('%d/%m/%Y'),
        "ref"=>"",
        "narration"=>"Virement interne", 
        "compta_lines_attributes"=>{"0"=>{"account_id"=>"89", "id"=>"37", 'credit'=>changed_attrs["amount"]},
          "1"=>{"account_id"=>"90", "id"=>"38", 'debit'=>changed_attrs["amount"]}}}
    end
    
    before(:each) do
      @controller.stub(:fill_author)
      @t = mock_model(Transfer, date:Date.today)
      Transfer.stub(:find).with(@t.id.to_s).and_return(@t)
    end
    
    it 'fills transfers nested attributes' do
      @controller.should_receive(:params_pre_treatment)
      @t.stub(:update_attributes).and_return true
      put :update, {:organism_id=>@o.to_param,:id => @t.to_param, :transfer => changed_attrs}, valid_session
    end

    it 'should receive update_attributes' do
      @t.should_receive(:update_attributes).with(pre_treatment_attrs).and_return true
      put :update, {:organism_id=>@o.to_param,:id => @t.to_param, :transfer => changed_attrs}, valid_session
    end
    
    it 'recoit fill_author' do
        @controller.should_receive(:fill_author).with(@t)
        @t.stub(:update_attributes)
      put :update, { :id => @t.to_param, :transfer => valid_attributes}, valid_session
      end

    it "assigns the requested transfer as @transfer" do
      @t.stub(:update_attributes)
      put :update, { :id => @t.to_param, :transfer => valid_attributes}, valid_session
      assigns(:transfer).should == @t
    end

    describe "with valid params" do
      before(:each) do
        @t.stub(:update_attributes).and_return true
      end
 

      it "redirects to transfer index within right month" do
        put :update, {:id => @t.to_param, :transfer => valid_attributes}, valid_session
        response.should redirect_to(transfers_url(MonthYear.from_date(@t.date).to_french_h))
      end
    end

    describe "with invalid params" do
      before(:each) do
        @t.stub(:update_attributes).and_return false
      end

      it "re-renders the 'edit' template" do
        put :update, {:organism_id=>@o.to_param, :id => @t.to_param, :transfer => valid_attributes}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy"  do
    before(:each) do
      @t = mock_model(Transfer)
      Transfer.stub(:find).with(@t.id.to_s).and_return(@t)
    end

    it "receive the destroy message" do
      @t.should_receive(:destroy)
      delete :destroy, {:organism_id=>@o.to_param, :id => @t.to_param}, valid_session
    end

    it "redirects to the transfers list" do
      @t.stub(:destroy)
      delete :destroy, {:organism_id=>@o.to_param, :id => @t.to_param}, valid_session
      response.should redirect_to(transfers_url)
    end
  end

end
